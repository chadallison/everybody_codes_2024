}
}
}
}
}
# Vertical check
senil <- sapply(seq_along(lines[[1]]), function(j) paste0(sapply(lines, function(line) substr(line, j, j)), collapse = ""))
for (j in seq_along(senil)) {
enil <- senil[[j]]
for (i in seq_len(nchar(enil))) {
for (word in words) {
l <- nchar(word)
if (substr(enil, i, i + l - 1) == word) {
for (n in seq_len(l)) {
grid[[i + n - 1]][[j]] <- TRUE
}
}
}
}
}
# Calculate the final sum
result <- sum(unlist(grid))
print(result)
inputs = readLines("inputs/q2p3.txt")
input = readLines("inputs/q2p3.txt")
solve <- function(input) {
# Split input into words and grid
sections <- strsplit(input, "\n\n")[[1]]
words <- unlist(strsplit(gsub("WORDS:", "", sections[1]), ","))
grid <- strsplit(sections[2], "\n")[[1]]
grid <- lapply(grid, function(row) strsplit(row, "")[[1]])
# Add reversed words to the list if not already included
reversed_words <- sapply(words, function(word) paste(rev(strsplit(word, NULL)[[1]]), collapse = ""))
words <- unique(c(words, reversed_words))
# Initialize a set for unique indices
unique_indices <- new.env()
# Grid dimensions
n_rows <- length(grid)
n_cols <- length(grid[[1]])
# Function to record unique indices
add_indices <- function(indices) {
for (index in indices) {
unique_indices[[index]] <- TRUE
}
}
# Search for words in the grid
for (y in seq_along(grid)) {
for (x in seq_along(grid[[y]])) {
for (word in words) {
word_len <- nchar(word)
word_chars <- strsplit(word, NULL)[[1]]
# Check top-to-bottom direction
if (y + word_len - 1 <= n_rows) {
if (all(mapply(function(i) grid[[y + i - 1]][x], seq_len(word_len)) == word_chars)) {
add_indices(sprintf("%d,%d", y + seq_len(word_len) - 1, x))
}
}
# Check left-to-right direction with wrap-around
if (all(mapply(function(i) grid[[y]][(x + i - 2) %% n_cols + 1], seq_len(word_len)) == word_chars)) {
add_indices(sprintf("%d,%d", y, (x + seq_len(word_len) - 2) %% n_cols + 1))
}
}
}
}
# The answer is the number of unique indices
answer <- length(ls(unique_indices))
return(answer)
}
solve(input)
# quest 2 part 3 work
# Part 1: Count sentence tokens with matching words
part1 <- function(input) {
# Parse input
sections <- strsplit(input, "\n\n")[[1]]
words <- unlist(strsplit(gsub("WORDS:", "", sections[1]), ","))
sentence <- unlist(strsplit(sections[2], " "))
count <- 0
# Count tokens with matching words
for (token in sentence) {
for (word in words) {
if (grepl(word, token)) {
count <- count + 1
}
}
}
return(count)
}
# Part 2: Count matching characters with forward/backward word matches
part2 <- function(input) {
# Parse input
sections <- strsplit(input, "\n\n")[[1]]
words <- unlist(strsplit(gsub("WORDS:", "", sections[1]), ","))
sentence <- unlist(strsplit(sections[2], "\\s+"))
count <- 0
# Count characters matching forward or reversed words
for (token in sentence) {
current <- strsplit(token, NULL)[[1]]
for (word in words) {
word_length <- nchar(word)
# Check forwards
index <- regexpr(word, token, fixed = TRUE)
while (index[1] != -1) {
current[seq(index, index + word_length - 1)] <- 'x'
index <- regexpr(word, substring(token, index + 1), fixed = TRUE) + index
}
# Check backwards
reversed <- paste(rev(strsplit(word, NULL)[[1]]), collapse = "")
index <- regexpr(reversed, token, fixed = TRUE)
while (index[1] != -1) {
current[seq(index, index + word_length - 1)] <- 'x'
index <- regexpr(reversed, substring(token, index + 1), fixed = TRUE) + index
}
}
count <- count + sum(current == 'x')
}
return(count)
}
# Part 3: Search words in grid (row and column)
part3 <- function(input) {
# Parse input
sections <- strsplit(input, "\n\n")[[1]]
words <- unlist(strsplit(gsub("WORDS:", "", sections[1]), ","))
grid <- strsplit(sections[2], "\n")[[1]]
grid <- lapply(grid, function(row) strsplit(row, NULL)[[1]])
found_characters <- lapply(seq_along(grid), function(i) rep(' ', length(grid[[i]])))
# Check rows with wrapping
for (word in words) {
word_length <- nchar(word)
reversed <- paste(rev(strsplit(word, NULL)[[1]]), collapse = "")
for (y in seq_along(grid)) {
for (x in seq_along(grid[[y]])) {
checked_word <- paste(sapply(seq_len(word_length), function(j) grid[[y]][(x + j - 2) %% length(grid[[y]]) + 1]), collapse = "")
if (checked_word == word || checked_word == reversed) {
for (j in seq_len(word_length)) {
found_characters[[y]][(x + j - 2) %% length(grid[[y]]) + 1] <- 'x'
}
}
}
}
}
# Check columns without wrapping
for (word in words) {
word_length <- nchar(word)
reversed <- paste(rev(strsplit(word, NULL)[[1]]), collapse = "")
for (x in seq_along(grid[[1]])) {
for (y in seq_len(length(grid) - word_length + 1)) {
checked_word <- paste(sapply(seq_len(word_length), function(j) grid[[y + j - 1]][x]), collapse = "")
if (checked_word == word || checked_word == reversed) {
for (j in seq_len(word_length)) {
found_characters[[y + j - 1]][x] <- 'x'
}
}
}
}
}
# Flatten and count all 'x' characters
count <- sum(unlist(found_characters) == 'x')
return(count)
}
# Export the functions (optional, if saving as an R script)
list(part1 = part1, part2 = part2, part3 = part3)
# Export the functions (optional, if saving as an R script)
part1(input)
part2(input)
part2(input)
part3(input)
# Export the functions (optional, if saving as an R script)
part1(input)
input
# Parse the input
lines <- unlist(strsplit(input, "\n")) # Split input into lines
keywords <- unlist(strsplit(lines[1], ",")) # Extract the keywords
grid <- lines[-c(1, 2)] # Remove the first (keywords) and second (blank) rows
# Define dimensions
num_rows <- length(grid)
num_cols <- nchar(grid[1])
# Convert grid into a character matrix
grid_matrix <- do.call(rbind, lapply(grid, function(row) unlist(strsplit(row, ""))))
# Function to search for a word in all directions
find_word <- function(word, grid_matrix, num_rows, num_cols) {
len <- nchar(word)
word_chars <- unlist(strsplit(word, ""))
count <- 0
# Helper to check if a word matches at a given position and direction
matches <- function(row, col, dr, dc) {
for (i in 0:(len - 1)) {
r <- ((row + dr * i - 1) %% num_rows) + 1
c <- ((col + dc * i - 1) %% num_cols) + 1
if (grid_matrix[r, c] != word_chars[i + 1]) return(FALSE)
}
return(TRUE)
}
# Check all positions and directions
for (row in 1:num_rows) {
for (col in 1:num_cols) {
# All 8 possible directions: horizontal, vertical, diagonal
directions <- list(c(0, 1), c(0, -1), c(1, 0), c(-1, 0), c(1, 1), c(1, -1), c(-1, 1), c(-1, -1))
for (dir in directions) {
if (matches(row, col, dir[1], dir[2])) {
count <- count + len
}
}
}
}
return(count)
}
# Find total highlighted scales
total_scales <- sum(sapply(keywords, find_word, grid_matrix, num_rows, num_cols))
# Find total highlighted scales
total_scales <- sum(sapply(keywords, find_word, grid_matrix, num_rows, num_cols))
# Output the result
cat("Total highlighted scales:", total_scales, "\n")
# Parse the input
lines <- unlist(strsplit(input, "\n")) # Split input into lines
keywords <- unlist(strsplit(lines[1], ",")) # Extract the keywords
grid <- lines[-c(1, 2)] # Remove the first (keywords) and second (blank) rows
# Define dimensions
num_rows <- length(grid)
num_cols <- nchar(grid[1])
# Convert grid into a character matrix
grid_matrix <- do.call(rbind, lapply(grid, function(row) unlist(strsplit(row, ""))))
# Function to search for a word in all directions
find_word <- function(word, grid_matrix, num_rows, num_cols) {
len <- nchar(word)
word_chars <- unlist(strsplit(word, ""))
highlighted <- matrix(FALSE, nrow = num_rows, ncol = num_cols) # Track highlighted scales
# Helper to check if a word matches at a given position and direction
matches <- function(row, col, dr, dc) {
for (i in 0:(len - 1)) {
r <- ((row + dr * i - 1) %% num_rows) + 1
c <- ((col + dc * i - 1) %% num_cols) + 1
if (grid_matrix[r, c] != word_chars[i + 1]) return(FALSE)
}
return(TRUE)
}
# Highlight scales for a matching word
highlight <- function(row, col, dr, dc) {
for (i in 0:(len - 1)) {
r <- ((row + dr * i - 1) %% num_rows) + 1
c <- ((col + dc * i - 1) %% num_cols) + 1
highlighted[r, c] <- TRUE
}
}
# Check all positions and directions
for (row in 1:num_rows) {
for (col in 1:num_cols) {
# All 8 possible directions: horizontal, vertical, diagonal
directions <- list(c(0, 1), c(0, -1), c(1, 0), c(-1, 0), c(1, 1), c(1, -1), c(-1, 1), c(-1, -1))
for (dir in directions) {
if (matches(row, col, dir[1], dir[2])) {
highlight(row, col, dir[1], dir[2])
}
}
}
}
return(sum(highlighted))
}
# Calculate total highlighted scales
total_scales <- sum(sapply(keywords, find_word, grid_matrix, num_rows, num_cols))
# Output the result
cat("Total highlighted scales:", total_scales, "\n")
# Parse the input
lines <- unlist(strsplit(input, "\n")) # Split input into lines
keywords <- unlist(strsplit(lines[1], ",")) # Extract the keywords
grid <- lines[-c(1, 2)] # Remove the first (keywords) and second (blank) rows
# Define dimensions
num_rows <- length(grid)
num_cols <- nchar(grid[1])
# Convert grid into a character matrix
grid_matrix <- do.call(rbind, lapply(grid, function(row) unlist(strsplit(row, ""))))
# Precompute wraparound indices
wrap_row <- function(x) ((x - 1) %% num_rows) + 1
wrap_col <- function(x) ((x - 1) %% num_cols) + 1
# Function to search for a word in all directions
find_word <- function(word, grid_matrix, num_rows, num_cols) {
len <- nchar(word)
word_chars <- unlist(strsplit(word, ""))
count <- 0
highlighted <- matrix(FALSE, nrow = num_rows, ncol = num_cols)
# Search each starting position in the grid
for (row in 1:num_rows) {
for (col in 1:num_cols) {
# Check all 8 directions
directions <- list(c(0, 1), c(0, -1), c(1, 0), c(-1, 0), c(1, 1), c(1, -1), c(-1, 1), c(-1, -1))
for (dir in directions) {
dr <- dir[1]
dc <- dir[2]
match <- TRUE
temp_highlighted <- matrix(FALSE, nrow = num_rows, ncol = num_cols)
for (i in 0:(len - 1)) {
r <- wrap_row(row + dr * i)
c <- wrap_col(col + dc * i)
if (grid_matrix[r, c] != word_chars[i + 1]) {
match <- FALSE
break
}
temp_highlighted[r, c] <- TRUE
}
if (match) {
highlighted <- highlighted | temp_highlighted
}
}
}
}
return(sum(highlighted))
}
# Calculate total highlighted scales
total_scales <- sum(sapply(keywords, find_word, grid_matrix, num_rows, num_cols))
# Output the result
cat("Total highlighted scales:", total_scales, "\n")
library(tidyverse)
library(tidymodels)
library(tvthemes)
library(janitor)
library(zoo)
library(glue)
library(nflfastR)
library(patchwork)
theme_custom = theme_avatar() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = 2.5, face = "italic"),
plot.caption = element_text(face = "italic"),
panel.grid.major = element_line(linewidth = 0.5, colour = "#DFDAD1"),
panel.grid.minor = element_line(linewidth = 0.5, colour = "#DFDAD1"))
theme_set(theme_custom)
# writing then reading removes nflfastR messages
write_csv(load_pbp(season = 2024), "data/season_pbp.csv")
season_pbp = read_csv("data/season_pbp.csv", show_col_types = F)
end_games = season_pbp |>
filter(desc == "END GAME" & season_type == "REG") |>
select(game_id, date = game_date, week, away_team, away_score = total_away_score, home_score = total_home_score, home_team) |>
mutate(win_team = case_when(home_score > away_score ~ home_team,
home_score < away_score ~ away_team,
home_score == away_score ~ "Tie"),
win_score = case_when(home_score > away_score ~ home_score,
home_score < away_score ~ away_score,
home_score == away_score ~ home_score),
lose_team = case_when(home_score > away_score ~ away_team,
home_score < away_score ~ home_team,
home_score == away_score ~ "Tie"),
lose_score = case_when(home_score > away_score ~ away_score,
home_score < away_score ~ home_score,
home_score == away_score ~ away_score),
game_margin = win_score - lose_score,
total_points = win_score + lose_score)
all_teams = sort(unique(c(unique(end_games$home_team), unique(end_games$away_team))))
all_szn_dates = sort(unique(end_games$date))
team_hex = teams_colors_logos |>
select(team = team_abbr, team_color) |>
filter(team %in% all_teams) |>
pull(team_color)
off_ovr_sr = season_pbp |>
filter(play_type %in% c("pass", "run")) |>
group_by(posteam) |>
summarise(success_rate = mean(success))
off_pass_sr = season_pbp |>
filter(play_type == "pass") |>
group_by(posteam) |>
summarise(success_rate = mean(success))
off_rush_sr = season_pbp |>
filter(play_type == "run") |>
group_by(posteam) |>
summarise(success_rate = mean(success))
def_ovr_sr = season_pbp |>
filter(play_type %in% c("pass", "run")) |>
group_by(defteam) |>
summarise(success_rate = mean(success))
def_pass_sr = season_pbp |>
filter(play_type == "pass") |>
group_by(defteam) |>
summarise(success_rate = mean(success))
def_rush_sr = season_pbp |>
filter(play_type == "run") |>
group_by(defteam) |>
summarise(success_rate = mean(success))
plot_df = off_ovr_sr |>
setNames(c("team", "off_sr")) |>
inner_join(def_ovr_sr |>
setNames(c("team", "def_sr")), by = "team")
plot_df |>
ggplot(aes(off_sr, def_sr)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_hline(yintercept = mean(plot_df$def_sr), linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = mean(plot_df$off_sr), linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = team), size = 3, max.overlaps = 32) +
labs(x = "Offensive Success Rate",
y = "Defensive Success Rate",
title = "Team Offensive and Defensive Success Rate") +
scale_x_continuous(breaks = seq(0, 1, by = 0.01), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.01), labels = scales::percent)
off_pass_sr
off_pass_sr |>
set_names(c("team", "pass_sr"))
off_pass_sr |>
setNames(c("team", "pass_sr"))
off_rush_sr |>
setNames(c("team", "rush_sr"))
off_pass_sr |>
setNames(c("team", "pass_sr"))
off_pass_sr |>
setNames(c("team", "pass_sr")) |>
inner_join(off_rush_sr |>
setNames(c("team", "rush_sr")), by = "team")
plot_df = off_pass_sr |>
setNames(c("team", "pass_sr")) |>
inner_join(off_rush_sr |>
setNames(c("team", "rush_sr")), by = "team")
plot_df |>
ggplot(aes(pass_sr, rush_sr)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_hline(yintercept = mean(plot_df$def_sr), linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = mean(plot_df$off_sr), linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = team), size = 3, max.overlaps = 32) +
labs(x = "Offensive Success Rate",
y = "Defensive Success Rate",
title = "Team Offensive and Defensive Success Rate") +
scale_x_continuous(breaks = seq(0, 1, by = 0.01), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.01), labels = scales::percent)
plot_df
plot_df |>
ggplot(aes(pass_sr, rush_sr)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_hline(yintercept = mean(plot_df$pass_sr), linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = mean(plot_df$rush_sr), linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = team), size = 3, max.overlaps = 32) +
labs(x = "Offensive Success Rate",
y = "Defensive Success Rate",
title = "Team Offensive and Defensive Success Rate") +
scale_x_continuous(breaks = seq(0, 1, by = 0.01), labels = scales::percent) +
scale_y_continuous(breaks = seq(0, 1, by = 0.01), labels = scales::percent)
plot_df |>
ggplot(aes(pass_sr, rush_sr)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_hline(yintercept = mean(plot_df$pass_sr), linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = mean(plot_df$rush_sr), linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = team), size = 3, max.overlaps = 32) +
labs(x = "Offensive Success Rate",
y = "Defensive Success Rate",
title = "Team Offensive and Defensive Success Rate")
plot_df |>
ggplot(aes(pass_sr, rush_sr)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_hline(yintercept = mean(plot_df$pass_sr), linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = mean(plot_df$rush_sr), linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = team), size = 3, max.overlaps = 32) +
labs(x = "Offensive Passing Success Rate",
y = "Offensive Rushing Success Rate",
title = "Team Offensive and Defensive Success Rate")
plot_df = off_pass_sr |>
setNames(c("team", "pass_sr")) |>
inner_join(off_rush_sr |>
setNames(c("team", "rush_sr")), by = "team")
plot_df |>
ggplot(aes(pass_sr, rush_sr)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_hline(yintercept = mean(plot_df$pass_sr), linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = mean(plot_df$rush_sr), linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = team), size = 3, max.overlaps = 32) +
labs(x = "Offensive Passing Success Rate",
y = "Offensive Rushing Success Rate",
title = "Team Offensive and Defensive Success Rate")
plot_df |>
ggplot(aes(pass_sr, rush_sr)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_hline(yintercept = mean(plot_df$pass_sr), linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = mean(plot_df$rush_sr), linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = team), size = 3, max.overlaps = 32) +
geom_abline() +
labs(x = "Offensive Passing Success Rate",
y = "Offensive Rushing Success Rate",
title = "Team Offensive and Defensive Success Rate")
plot_df |>
ggplot(aes(pass_sr, rush_sr)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_hline(yintercept = mean(plot_df$pass_sr), linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = mean(plot_df$rush_sr), linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = team), size = 3, max.overlaps = 32) +
labs(x = "Offensive Passing Success Rate",
y = "Offensive Rushing Success Rate",
title = "Team Offensive and Defensive Success Rate")
plot_df |>
ggplot(aes(pass_sr, rush_sr)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_hline(yintercept = mean(plot_df$pass_sr), linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = mean(plot_df$rush_sr), linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = team), size = 3, max.overlaps = 32) +
labs(x = "Offensive Passing Success Rate",
y = "Offensive Rushing Success Rate",
title = "Team Offensive Passing and Rushing Success Rate")
plot_df = def_pass_sr |>
setNames(c("team", "pass_sr")) |>
inner_join(def_rush_sr |>
setNames(c("team", "rush_sr")), by = "team")
plot_df |>
ggplot(aes(pass_sr, rush_sr)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
geom_hline(yintercept = mean(plot_df$pass_sr), linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = mean(plot_df$rush_sr), linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = team), size = 3, max.overlaps = 32) +
labs(x = "Offensive Passing Success Rate",
y = "Offensive Rushing Success Rate",
title = "Team Offensive Passing and Rushing Success Rate")
